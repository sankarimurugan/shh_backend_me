{
	"info": {
		"_postman_id": "cf177bbf-091e-40c0-af81-da9c3ed2441f",
		"name": "SSH",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" width=\"2162\" height=\"1530\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "32032329"
	},
	"item": [
		{
			"name": "CREATE  BLOG",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>Title</th>\r",
							"        <th>Author</th>\r",
							"        <th>Category</th>\r",
							"        <th>Tags</th>\r",
							"        <th>Created At</th>\r",
							"        <th>Updated At</th>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>{{response.blog.title}}</td>\r",
							"        <td>{{response.blog.author}}</td>\r",
							"        <td>{{response.blog.category}}</td>\r",
							"        <td>{{response.blog.tags.join(\", \")}}</td>\r",
							"        <td>{{response.blog.createdAt}}</td>\r",
							"        <td>{{response.blog.updatedAt}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {response: pm.response.json()}\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzQ1MGRlNDMxODZhNjE5ODljNzk5ZCIsImlhdCI6MTc0ODI1OTA2NiwiZXhwIjoxNzQ4MzQ1NDY2fQ.pDwsY5Cwjvph0RrCc_YFD6V04qgB-_be9OkIXwhyImY"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "title",
							"value": "My FIRST Blog",
							"type": "text"
						},
						{
							"key": "author",
							"value": "Jenii",
							"type": "text"
						},
						{
							"key": "content",
							"value": "This blog explains how AI works.",
							"type": "text"
						},
						{
							"key": "category",
							"value": "Sports",
							"type": "text"
						},
						{
							"key": "tags",
							"value": "[\"AI\",\"Tech\"]",
							"type": "text"
						},
						{
							"key": "metaDescription",
							"value": "A blog about AI.",
							"type": "text"
						},
						{
							"key": "metaTitle",
							"value": "AI Explained",
							"type": "text"
						},
						{
							"key": "sections",
							"value": "[\n  {\n    \"title\": \"Intro\",\n    \"description\": \"Text here\",\n    \"images\": [\"intro-img1\", \"intro-img2\"]\n  }\n]\n",
							"type": "text"
						},
						{
							"key": "intro-img1",
							"type": "file",
							"src": "postman-cloud:///1f03a258-e242-45e0-a44a-0ebff93d5fd2"
						},
						{
							"key": "intro-img2",
							"type": "file",
							"src": "postman-cloud:///1f03a258-fb28-4e10-a74c-aee89a992416"
						}
					]
				},
				"url": "http://localhost:3002/api/shh/blogs/create",
				"description": "Generated from cURL: curl -X POST http://localhost:3002/api/blogs \\\r\n  -F \"title=My First Blog\" \\\r\n  -F \"author=Jane Doe\" \\\r\n  -F \"content=This blog explains how AI works.\" \\\r\n  -F \"category=Tech\" \\\r\n  -F 'tags=[\"AI\",\"Tech\"]' \\\r\n  -F \"metaDescription=A blog about AI.\" \\\r\n  -F \"metaTitle=AI Explained\" \\\r\n  -F 'sections=[{\"title\":\"Intro\",\"description\":\"Text here\",\"images\":[]}]' \\\r\n  -F \"images=@/path/to/image1.jpg\" \\\r\n  -F \"images=@/path/to/image2.png\"\r\n"
			},
			"response": []
		},
		{
			"name": "GET ALL BLOGS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": "http://localhost:3002/api/shh/blogs/",
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "EDIT BLOG",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>Title</th>\r",
							"        <th>Author</th>\r",
							"        <th>Category</th>\r",
							"        <th>Tags</th>\r",
							"        <th>Created At</th>\r",
							"        <th>Updated At</th>\r",
							"    </tr>\r",
							"    \r",
							"    <tr>\r",
							"        <td>{{response.blog.title}}</td>\r",
							"        <td>{{response.blog.author}}</td>\r",
							"        <td>{{response.blog.category}}</td>\r",
							"        <td>{{response.blog.tags}}</td>\r",
							"        <td>{{response.blog.createdAt}}</td>\r",
							"        <td>{{response.blog.updatedAt}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {response: pm.response.json()}\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzQwMzRmNTU1MjczMWE4NjUyYzBiMyIsImlhdCI6MTc0ODI1NTkyNCwiZXhwIjoxNzQ4MzQyMzI0fQ.-lb81S7IjGkTxjfmvnn_4NhP0hoFnKv3UnOJke5oiHk"
					}
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer                             // Delete old image if replaced\n",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "title",
							"value": "Updated Blog Title as AJIT ",
							"type": "text"
						},
						{
							"key": "author",
							"value": "Updated Author",
							"type": "text"
						},
						{
							"key": "content",
							"value": "Updated content goes here",
							"type": "text"
						},
						{
							"key": "category",
							"value": "Updated Category",
							"type": "text"
						},
						{
							"key": "tags",
							"value": "[\"tech\",\"CRICKETnews\"]",
							"type": "text"
						},
						{
							"key": "metaDescription",
							"value": "Updated meta description",
							"type": "text"
						},
						{
							"key": "metaTitle",
							"value": "Updated meta title",
							"type": "text"
						},
						{
							"key": "sections",
							"value": "[{\"title\":\"UPDATED Intro\",\"description\":\"Text here\",\"images\":[\"intro-img1\",\"intro-img2\"]}]",
							"type": "text"
						},
						{
							"key": "intro-img1",
							"type": "file",
							"src": "postman-cloud:///1f03a252-4310-4a40-bce0-a5117d5b5c5b"
						},
						{
							"key": "intro-img2",
							"type": "file",
							"src": "postman-cloud:///1f03a252-b3dd-4980-ab59-a98c1954b7f2"
						}
					]
				},
				"url": "http://localhost:3002/api/shh/blogs/6834512e43186a61989c79a1",
				"description": "Generated from cURL: curl -X PUT \"http://localhost:3002/api/shh/blogs/<BLOG_ID>\" \\\r\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\r\n  -F \"title=Updated Blog Title\" \\\r\n  -F \"author=Updated Author\" \\\r\n  -F \"content=Updated content goes here\" \\\r\n  -F \"category=Updated Category\" \\\r\n  -F \"tags=[\\\"tech\\\",\\\"news\\\"]\" \\\r\n  -F \"metaDescription=Updated meta description\" \\\r\n  -F \"metaTitle=Updated meta title\" \\\r\n  -F \"sections=[{\\\"heading\\\":\\\"Intro\\\",\\\"body\\\":\\\"Section content\\\"}]\" \\\r\n  -F \"images=@/full/path/to/image1.jpg\" \\\r\n  -F \"images=@/full/path/to/image2.png\"\r\n"
			},
			"response": []
		},
		{
			"name": "DELETE BLOG",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzQwMzRmNTU1MjczMWE4NjUyYzBiMyIsImlhdCI6MTc0ODI0OTM4NSwiZXhwIjoxNzQ4MzM1Nzg1fQ.SyHL4dcLPeqTo_kSxVXfmMil02xAoRascHCxAGhUdNk"
					}
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": "http://localhost:3002/api/shh/blogs/68343dfd4c920ae3e6fb843c",
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "GET BLOGS BY ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MzQwMzRmNTU1MjczMWE4NjUyYzBiMyIsImlhdCI6MTc0ODI0OTM4NSwiZXhwIjoxNzQ4MzM1Nzg1fQ.SyHL4dcLPeqTo_kSxVXfmMil02xAoRascHCxAGhUdNk"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3002/api/shh/blogs/?id=683429a32a4b55c8a862403e",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3002",
					"path": [
						"api",
						"shh",
						"blogs",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "683429a32a4b55c8a862403e"
						}
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "LOGIN",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"aj@xyz.com\",\r\n  \"password\": \"user123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:3002/api/shh/auth/login"
			},
			"response": []
		},
		{
			"name": "REGISTER",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Ajit\",\r\n  \"email\": \"aj@xyz.com\",\r\n  \"password\": \"user123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:3002/api/shh/auth/register"
			},
			"response": []
		},
		{
			"name": "GET GETEGORES",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": "http://localhost:3002/api/shh/blogs/categories"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}